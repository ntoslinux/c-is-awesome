/*
 * Instruction selector for 32-bit PowerPC CPUs
 * Copyright (C) 2011  Pekka Enberg
 *
 * This file is released under the GPL version 2 with the following
 * clarification and special exception:
 *
 *     Linking this library statically or dynamically with other modules is
 *     making a combined work based on this library. Thus, the terms and
 *     conditions of the GNU General Public License cover the whole
 *     combination.
 *
 *     As a special exception, the copyright holders of this library give you
 *     permission to link this library with independent modules to produce an
 *     executable, regardless of the license terms of these independent
 *     modules, and to copy and distribute the resulting executable under terms
 *     of your choice, provided that you also meet, for each linked independent
 *     module, the terms and conditions of the license of that module. An
 *     independent module is a module which is not derived from or based on
 *     this library. If you modify this library, you may extend this exception
 *     to your version of the library, but you are not obligated to do so. If
 *     you do not wish to do so, delete this exception statement from your
 *     version.
 *
 * Please refer to the file LICENSE for details.
 */

#include "jit/compiler.h"

#include "jit/bc-offset-mapping.h"
#include "jit/compilation-unit.h"
#include "jit/basic-block.h"
#include "jit/expression.h"
#include "jit/statement.h"

#include "arch/instruction.h"
#include "arch/stack-frame.h"

#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <stdio.h>

#define MBCGEN_TYPE		struct basic_block
#define MBCOST_DATA		struct basic_block
#define MBTREE_TYPE		struct tree_node
#define MBTREE_OP(t)		tree_op(t)
#define MBTREE_LEFT(t)		tree->kids[0]
#define MBTREE_RIGHT(t)		tree->kids[1]
#define MBREG_TYPE		struct var_info *

#define MBMAX_OPCODES		STMT_LAST

#define MONOBURG_LOG		1
#define HAVE_ARRAY_ELEM_INIT	1

static void select_insn(struct basic_block *bb, struct tree_node *tree, struct insn *insn);

%%

%termprefix EXPR_ OP_ STMT_

%start stmt

freg:	EXPR_FVALUE
{
	assert(!"not implemented");
}

reg:	EXPR_VALUE
{
	/* TODO */
}

reg:	EXPR_LOCAL
{
	assert(!"not implemented");
}

freg:	EXPR_FLOAT_LOCAL
{
	assert(!"not implemented");
}

reg:	EXPR_TEMPORARY
{
	assert(!"not implemented");
}

freg:	EXPR_FLOAT_TEMPORARY
{
	assert(!"not implemented");
}

reg:	OP_ADD(reg, reg)
{
	assert(!"not implemented");
}

freg:	OP_DADD(freg, freg)
{
	assert(!"not implemented");
}

freg:	OP_FADD(freg, freg)
{
	assert(!"not implemented");
}

reg:	OP_SUB(reg, reg)
{
	assert(!"not implemented");
}

freg:	OP_DSUB(freg, freg)
{
	assert(!"not implemented");
}

freg:	OP_FSUB(freg, freg)
{
	assert(!"not implemented");
}

reg:	OP_MUL(reg, reg)
{
	assert(!"not implemented");
}

freg:	OP_DMUL(freg, freg)
{
	assert(!"not implemented");
}

freg:	OP_FMUL(freg, freg)
{
	assert(!"not implemented");
}

reg: 	OP_MUL_64(reg, reg)
{
	assert(!"not implemented");
}

reg:	OP_DIV(reg, reg)
{
	assert(!"not implemented");
}

freg:	OP_DDIV(freg, freg)
{
	assert(!"not implemented");
}

freg:	OP_FDIV(freg, freg)
{
	assert(!"not implemented");
}

reg:	OP_DIV_64(reg, reg)
{
	assert(!"not implemented");
}

reg:	OP_REM(reg, reg)
{
	assert(!"not implemented");
}

freg:	OP_DREM(freg, freg)
{
	assert(!"not implemented");
}

freg:	OP_FREM(freg, freg)
{
	assert(!"not implemented");
}

reg:	OP_REM_64(reg, reg)
{
	assert(!"not implemented");
}

reg:	OP_NEG(reg)
{
	assert(!"not implemented");
}

freg:	OP_DNEG(freg)
{
	assert(!"not implemented");
}

freg:	OP_FNEG(freg)
{
	assert(!"not implemented");
}

reg:	OP_SHL(reg, reg)
{
	assert(!"not implemented");
}

reg:	OP_SHL_64(reg, reg)
{
	assert(!"not implemented");
}

reg:	OP_SHR(reg, reg)
{
	assert(!"not implemented");
}

reg:	OP_SHR_64(reg, reg)
{
	assert(!"not implemented");
}

reg:	OP_USHR(reg, reg)
{
	assert(!"not implemented");
}

reg:	OP_USHR_64(reg, reg)
{
	assert(!"not implemented");
}

reg:	OP_OR(reg, reg)
{
	assert(!"not implemented");
}

reg:	OP_AND(reg, reg)
{
	assert(!"not implemented");
}

reg:	OP_XOR(reg, reg)
{
	assert(!"not implemented");
}

reg:	OP_CMPL(freg, freg)
{
	assert(!"not implemented");
}

reg:	OP_CMPG(freg, freg)
{
	assert(!"not implemented");
}

reg:	OP_CMP(reg, reg)
{
	assert(!"not implemented");
}

reg:	OP_EQ(reg, reg)
{
	assert(!"not implemented");
}

reg:	OP_NE(reg, reg)
{
	assert(!"not implemented");
}

reg:	OP_LT(reg, reg)
{
	assert(!"not implemented");
}

reg:	OP_GT(reg, reg)
{
	assert(!"not implemented");
}

reg:	OP_GE(reg, reg)
{
	assert(!"not implemented");
}

reg:	OP_LE(reg, reg)
{
	assert(!"not implemented");
}

reg:	EXPR_CLASS_FIELD
{
	assert(!"not implemented");
}

freg:	EXPR_FLOAT_CLASS_FIELD
{
	assert(!"not implemented");
}

reg:	EXPR_INSTANCE_FIELD(reg)
{
	assert(!"not implemented");
}

freg:	EXPR_FLOAT_INSTANCE_FIELD(reg)
{
	assert(!"not implemented");
}

reg:	EXPR_NEW
{
	assert(!"not implemented");
}

reg:	EXPR_ARRAY_SIZE_CHECK(reg)
{
	assert(!"not implemented");
}

reg:	EXPR_NEWARRAY(reg)
{
	assert(!"not implemented");
}

reg:	EXPR_NULL_CHECK(reg)
{
	assert(!"not implemented");
}

arg:	EXPR_MULTIARRAY_SIZE_CHECK(arg)
{
	assert(!"not implemented");
}

reg:	EXPR_MULTIANEWARRAY(arg)
{
	assert(!"not implemented");
}

reg:    EXPR_ANEWARRAY(reg)
{
	assert(!"not implemented");
}

reg:    EXPR_ARRAYLENGTH(reg)
{
	assert(!"not implemented");
}

reg:	EXPR_INSTANCEOF(reg)
{
	assert(!"not implemented");
}

reg:	EXPR_TRUNCATION(reg)
{
	assert(!"not implemented");
}

reg:	EXPR_CONVERSION(reg)
{
	assert(!"not implemented");
}

freg:	EXPR_CONVERSION_FLOAT_TO_DOUBLE(freg)
{
	assert(!"not implemented");
}

freg:	EXPR_CONVERSION_DOUBLE_TO_FLOAT(freg)
{
	assert(!"not implemented");
}

freg:	EXPR_CONVERSION_TO_FLOAT(reg)
{
	assert(!"not implemented");
}

freg:	EXPR_CONVERSION_TO_DOUBLE(reg)
{
	assert(!"not implemented");
}

reg:	EXPR_CONVERSION_FROM_FLOAT(freg)
{
	assert(!"not implemented");
}

reg:	EXPR_CONVERSION_FROM_DOUBLE(freg)
{
	assert(!"not implemented");
}

arg:	EXPR_NO_ARGS
{
	assert(!"not implemented");
}

arg:	EXPR_ARG_THIS(reg)
{
	assert(!"not implemented");
}

arg:	EXPR_ARG(reg)
{
	assert(!"not implemented");
}

arg:	EXPR_ARG(freg)
{
	assert(!"not implemented");
}

arg:	EXPR_ARGS_LIST(arg, arg)
{
	assert(!"not implemented");
}

reg:	EXPR_EXCEPTION_REF
{
	assert(!"not implemented");
}

stmt:	STMT_INVOKE(arg)
{
	assert(!"not implemented");
}

stmt:	STMT_INVOKEINTERFACE(arg)
{
	assert(!"not implemented");
}

stmt:	STMT_INVOKEVIRTUAL(arg)
{
	assert(!"not implemented");
}

stmt:	STMT_RETURN(reg)
{
	select_insn(s, tree, insn(INSN_BLR));
}

stmt:	STMT_RETURN(freg)
{
	assert(!"not implemented");
}

stmt:	STMT_VOID_RETURN
{
	assert(!"not implemented");
}

stmt:	STMT_EXPRESSION(reg)
{
	assert(!"not implemented");
}

stmt:	STMT_EXPRESSION(freg)
{
	assert(!"not implemented");
}

stmt:	STMT_STORE(EXPR_CLASS_FIELD, reg)
{
	assert(!"not implemented");
}

stmt:	STMT_STORE(EXPR_FLOAT_CLASS_FIELD, freg)
{
	assert(!"not implemented");
}

inst_field: EXPR_INSTANCE_FIELD(reg)
{
	assert(!"not implemented");
}

float_inst_field: EXPR_FLOAT_INSTANCE_FIELD(reg)
{
	assert(!"not implemented");
}

stmt:	STMT_STORE(inst_field, reg)
{
	assert(!"not implemented");
}

stmt:	STMT_STORE(float_inst_field, freg)
{
	assert(!"not implemented");
}

stmt:	STMT_STORE(EXPR_LOCAL, reg)
{
	assert(!"not implemented");
}

stmt:	STMT_STORE(EXPR_FLOAT_LOCAL, freg)
{
	assert(!"not implemented");
}

stmt:  STMT_STORE(EXPR_TEMPORARY, EXPR_LOCAL)
{
	assert(!"not implemented");
}

stmt:  STMT_STORE(EXPR_FLOAT_TEMPORARY, EXPR_FLOAT_LOCAL)
{
	assert(!"not implemented");
}

stmt:  STMT_STORE(EXPR_TEMPORARY, reg)
{
	assert(!"not implemented");
}

stmt:  STMT_STORE(EXPR_FLOAT_TEMPORARY, freg)
{
	assert(!"not implemented");
}

array_deref: EXPR_ARRAY_DEREF(reg, reg)
{
	assert(!"not implemented");
}

stmt:	STMT_STORE(array_deref, reg)
{
	assert(!"not implemented");
}

stmt:	STMT_STORE(array_deref, freg)
{
	assert(!"not implemented");
}

stmt:	STMT_STORE(reg, array_deref)
{
	assert(!"not implemented");
}

stmt:	STMT_STORE(freg, array_deref)
{
	assert(!"not implemented");
}

stmt:	STMT_ARRAY_STORE_CHECK(reg, reg)
{
	assert(!"not implemented");
}

stmt:	STMT_ARRAY_STORE_CHECK(freg, reg)
{
	assert(!"not implemented");
}

stmt:	STMT_ATHROW(reg)
{
	assert(!"not implemented");
}

array_check: EXPR_ARRAY_DEREF(reg, reg)
{
	assert(!"not implemented");
}

stmt:	STMT_ARRAY_CHECK(array_check)
{
	assert(!"not implemented");
}

stmt:	STMT_IF(reg)
{
	assert(!"not implemented");
}

stmt:	STMT_GOTO
{
	assert(!"not implemented");
}

stmt:	STMT_TABLESWITCH(reg)
{
	assert(!"not implemented");
}

stmt:	STMT_LOOKUPSWITCH_JUMP(reg)
{
	assert(!"not implemented");
}

reg:	EXPR_LOOKUPSWITCH_BSEARCH(reg)
{
	assert(!"not implemented");
}

stmt:	STMT_MONITOR_ENTER(reg)
{
	assert(!"not implemented");
}

stmt:	STMT_MONITOR_EXIT(reg)
{
	assert(!"not implemented");
}

stmt:	STMT_CHECKCAST(reg)
{
	assert(!"not implemented");
}

%%

static void select_insn(struct basic_block *bb, struct tree_node *tree, struct insn *insn)
{
	insn_set_bc_offset(insn, tree->bytecode_offset);
	bb_add_insn(bb, insn);
}

static void statement_select(struct basic_block *bb, MBState *state, int goal)
{
	const guint16 *nts;
	MBState *kids[2];
	int ern;
	int i;

	ern = mono_burg_rule(state, goal);
	nts = mono_burg_nts_data + mono_burg_nts[ern];

	mono_burg_kids(state, ern, kids);

	for (i = 0; nts[i]; i++) 
		statement_select(bb, kids[i], nts[i]);

	mono_burg_emit(ern, state, state->tree, bb);
}

static void free_state(MBState *state)
{
	if (!state)
		return;

	free_state(state->left);
	free_state(state->right);

	g_free(state);
}

static void basic_block_select(struct basic_block *bb)
{
	struct statement *stmt;
	MBState *state;

	mono_burg_init();

	for_each_stmt(stmt, &bb->stmt_list) {
		state = mono_burg_label(&stmt->node, bb);
		statement_select(bb, state, MB_NTERM_stmt);
		free_state(state);
	}
}

int select_instructions(struct compilation_unit *cu)
{
	struct basic_block *bb;

	for_each_basic_block(bb, &cu->bb_list)
		basic_block_select(bb);

	return 0;
}
